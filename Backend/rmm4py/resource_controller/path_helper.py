"""
This module provides access to the most often used paths in the rmm4pycore and provides functionalities to look for specific
files or directories.
"""

import os
import pathlib
from enum import Enum
import sys
import subprocess

__ROOT_DIR = os.path.split(os.path.abspath(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))[0]
__TXT_FILE = 'root_dir.txt'


class Folder(Enum):
    """
    Enum is a list of folders with the corresponding paths.
    """

    DATA = os.path.join("data")
    RESOURCE_CONTROLLER = os.path.join("src", "rmm4py", "resource_controller")
    RMM_CORE = os.path.join("src", "rmm4py")
    RMM_APPLICATIONS = os.path.join("src", "rmm4pyapp")
    TEST = "test"


def set_root_dir(root_path):
    """
    Function creates a root_dir.txt with the path to the desired root_directory as content.
    The file is stored in the resource controller directory.

    Parameters
    ----------
    root_path : str

    Returns
    -------
    None

    """
    for root, dirs, file_name in os.walk(__ROOT_DIR):
        RC = "resource_controller"
        # This checks that the root_dir.txt will not be created in the test directory
        if RC in dirs and str(os.path.join("site-packages", "test")) not in str(root) and \
                str(os.path.join("rmm4py", "test")) not in str(root):
            txt_path = os.path.join(root, RC, __TXT_FILE)

    print("New root directory is " + str(root_path))

    with open(txt_path, 'w+') as f:
        f.write(root_path)


def get_root_dir():
    """
    Function returns the absolute path to rmm4pycore-core Folder or the directory previously defined with
    set_root_dir().

    Returns
    -------
    str
    """

    for root, dirs, file_name in os.walk(__ROOT_DIR):
        if __TXT_FILE in file_name:
            txt_path = os.path.join(root, __TXT_FILE)
            with open(txt_path, 'r') as f:
                root_dir = f.read()
            return root_dir

    # if no .txt specifies the root_directory, the default value is returned.
    return __ROOT_DIR


def set_root_dir_to_default():
    """
    Sets the root directory back to the default value by deleting the .txt file
    generated by set_root_dir().

    Returns
    -------
    None

    """
    for root, dirs, file_name in os.walk(__ROOT_DIR):
        RC = "resource_controller"
        if RC in dirs and str(os.path.join("site-packages", "test")) not in str(root) and \
                str(os.path.join("rmm4py", "test")) not in str(root):
            txt_path = os.path.join(root, RC, __TXT_FILE)
            if os.path.exists(txt_path):
                os.remove(txt_path)


def get_folder_path(enum):
    """
    Returns path to a subfolder in rmm4pycore

    Parameters
    ----------
    enum : Folder.enum_member

    Returns
    -------
    str
        Path to the subfolder
    """
    try:
        return str(os.path.abspath(os.path.join(get_root_dir(), enum.value)))
    except AttributeError:
        raise AttributeError(print("Use the Folder enum: get_folder_path(Folder.FOLDER_OF_YOUR_CHOICE)"))


def get_dataset_path_by_name(dataset_name):
    """
    Function specifically searches the data subfolder of rmm4pycore. Also finds subfolders e.g. "Eventlogs/BPIC_2012"
    (in contrast to look_for_directory)

    Parameters
    ----------
    dataset_name : str
        name of the Dataset which should be found

    Returns
    -------
    path, None
        If the directory exists the path to it, if it does not exist, False.
    """

    for root, dirs, file_name in os.walk(os.path.join(get_root_dir(), "data")):
        for dir in dirs:
            if str(dataset_name) in str(os.path.join(root, dir)):
                return pathlib.PurePath(os.path.join(root, dir))

    return None


def get_dataset_path(enum):
    """
    Function specifically searches the data subfolder of rmm4pycore. Also finds subfolders e.g. "Eventlogs/BPIC_2012"
    (in contrast to look_for_directory)

    Parameters
    ----------
    enum : Datasets.enum_member
        name of the Dataset which should be found

    Returns
    -------
    path
        If the directory exists the path to it, if it does not exist, False.
    """
    try:
        if "dir" in enum.value:
            for root, dirs, file_name in os.walk(os.path.join(get_root_dir(), "data")):
                for directory in dirs:
                    if enum.value["destination_dir"] in str(os.path.join(root, directory)):
                        return pathlib.PurePath(os.path.join(root, directory))
            raise FileNotFoundError("The Dataset has not been found. Try generating it first "
                                    "with generate_dataset(DatasetCollection.ENUM)")

        else:
            filename = enum.value["filename"]
            path = look_for_file(filename)

            if path:
                #File was found
                return path

            else:
                comp_formats = [".zip", ".tar", ".tar.gz", ".gz", ".gzip"]
                for ext in comp_formats:
                    if filename.endswith(ext):
                        return look_for_file(filename[:-len(ext)])
                raise FileNotFoundError

    except AttributeError:
        raise AttributeError(
            f"{enum} not found. "
            f"Use the Datasets enum from dataset.py: get_dataset_path(Datasets.DATASET_OF_YOUR_CHOICE)"
        )


def look_for_file(file_name):
    """
    Function finds the path to any file from the root directory (rmm4pycore) or subdirectories.

    Parameters
    ----------
    file_name : str
        Name of the file to be found.

    Returns
    -------
    file_path : list, str
        Either a list of paths if more than one matching file was found or a single path if only a single path was
        found.
        Raises FileNotFoundError if nothing was found.
    """

    search_results = []

    for root, dirs, files in os.walk(get_root_dir()):

        if file_name in files:
            search_results.append(str(pathlib.Path(os.path.join(root, file_name)).absolute()))

    if len(search_results) == 1:
        return search_results[0]
    else:
        return search_results


def get_path(file_name):
    """
    Previously there were two very similiar implementations, one "get_path" and one "look_for_file". Since both have
    been used widely, this function is kept for the ease of programming, but is just an alias for look_for_file.

    Parameters
    ----------
    file_name

    Returns
    -------

    """
    return look_for_file(file_name)


def look_for_directory(directory):
    """
    Function finds the path to any directory from the root directory (rmm4pycore) or subdirectories.

    Parameters
    ----------
    directory : str
        Name of the directory.

    Returns
    -------
    path, status : str
        Absolute path of the found directory /or execution status.
    """
    found = False
    for root, dirs, file_name in os.walk(get_root_dir()):

        if directory in dirs:
            return pathlib.PurePath(os.path.join(root, directory))

    return found


def hide_file(path):
    """
    Hides files on various operating systems.

    Parameters
    ----------
    path : str

    Returns
    -------

    """
    if sys.platform.startswith('win32'):
        subprocess.check_call(["attrib", "+H", path])
    elif sys.platform.startswith('linux') or sys.platform.startswith('darwin') or sys.platform.startswith('aix'):
        hidden_filename = path.split(os.sep)[-1]
        if not hidden_filename.startswith("."):
            path = path.replace(hidden_filename, "." + hidden_filename)
    else:
        raise Warning("Unable to hide file.")
    return path
